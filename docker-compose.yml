services:
  app:
    build: .
    ports:
      - "8000:8000"
    # Volumes for development hot-reloading (optional for production image)
    # If you want the image to be self-contained for production, remove these.
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./tests:/app/tests # Added tests volume mount
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Start alembic migrations and then uvicorn directly
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  db:
    image: postgres:13-alpine # Using alpine for a smaller image
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: supper_password_2025
      POSTGRES_DB: supper
    ports:
      - "5432:5432" # Expose only if direct access to DB from host is needed
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"] # Use env vars from .env
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine # Using alpine for a smaller image
    ports:
      - "6379:6379" # Expose only if direct access to Redis from host is needed
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-worker:
    build: .
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python notification_worker.py
    restart: unless-stopped

volumes:
  postgres_data: {}
